
# 실제 application이 사용하는 'application.properties'와 이름이 같은 파일을 integration test를 위해 사용한다. 
# 목적은 실제 app의 DB와 다른 DB를 사용하기 위하여
# 만약 실제 app의 DB와 같은 설정으로 사용하고 싶으면, 
# src/test/resources path 밑에 존재하는 property 파일의 이름을 변경하면 된다




spring.thymeleaf.cache=false




spring.h2.console.enabled=true
spring.h2.console.path=/h2-console



# For ex, if we have such as 'data.sql' file, according to the configuration the file is never run
# We don't want any dummy data is run 
spring.datasource.initialization-mode=never




# sql exception을 console로 출력하는 configuration
spring.jpa.show-sql=true

# From Java code, it automatically derives the tables for the table's name, columns, and a primary key
# 우리가 @Entity annotation으로 지정한 Java class들을 table로 만들고, column과 primary key등으로 만들어주는 configuration 
# spring.jpa.hibernate.ddl-auto=none


# Java code에서 '${envVersion}'를 이용하여 사용가능. 
# 예를 들어, application의 version등을 관리할 때 사용
envVersion=test



# 실제 application도 PostgreSQL을 사용하므로, test DB도 PostgreSQL로써 동작하도록 하기 위해
jdbc.url=jdbc:h2:mem:test;MODE=PostgreSQL;DB_CLOSE_DELAY=-1




