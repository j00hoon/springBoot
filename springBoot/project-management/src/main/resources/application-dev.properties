spring.datasource.url=jdbc:postgresql://localhost:5432/pma-springbootdb
spring.datasource.username=postgres
spring.datasource.password=password
 


# For ex, if we have such as 'data.sql' file, according to the configuration the file is never run
# We don't want any dummy data is run 
spring.datasource.initialization-mode=never
# 'application-test.properties'에 있는 h2 db처럼 embedded database와 같은 경우,
# spring framework is too smart to notice that we are going to use h2 DB for testing.
# This is why we actually was able to use 'data.sql' for dummy data 


# From Java code, it automatically derives the tables for the table's name, columns, and a primary key
# 우리가 @Entity annotation으로 지정한 Java class들을 table로 만들고, column과 primary key등으로 만들어주는 configuration 
spring.jpa.hibernate.ddl-auto=none


# sql에서 일어나는 exception을 보기 위해서
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true


spring.jpa.show-sql=true
# test 혹은 development 과정에서는 cache가 false인 것은 괜찮다. 하지만 실제 prod에서는 true여야 함
spring.thymeleaf.cache=false
envVersion=dev








# dev application의 DB를 h2로 이용하기 위한 설정

#jdbc.url=jdbc:h2:mem:test;MODE=PostgreSQL;DB_CLOSE_DELAY=-1
#spring.h2.console.enabled=true
#spring.h2.console.path=/h2-console



# logging을 사용하기 위한 설정
# DEBUG보다도 자세하게 보고 싶으면, TRACE level이 있다
# TRACE는 모든 것을 표현한다
logging.level.com.springProj.pma = DEBUG

# root의 뜻은 이 application의  root이다. 
# 이 project(application)의 모든 것을 포함한다는 뜻
# 만약 이 설정을 'DEBUG'로 하면 너무나 많은 정보들이 console에 출력이 되므로, 보통은 root는 WARN으로 한다
logging.level.root = WARN
# actual spring framework log
logging.level.org.springframework=INFO
# log내용을 file로 저장
#logging.file=app.log






# custom validator의 isValid()가  read(client check)와 insertion 두 번이 불리는 것을 방지하기 위해
# 밑의 code 없이 postman으로 post를 보내서 Json data를 employee table에 추가하려고 하면 
# 두 번이 불리면 NullPointerException 발생
# 밑의 configuration은 간단하게 persistence validation을 turn off하는 것
# 그래서 validation 과정을 한 번으로 만드는 것 
spring.jpa.properties.javax.persistence.validation.mode=none







# white error page를 false로 만든다
# And we need to create our own error page
server.error.whitelabel.enabled=false




